import os
import random
import sqlite3
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.utils.markdown import hlink

import admin_settings
from keyboards import *
from states import *
from admin_settings import *
from db import db, DB
from config import config



router = Router()



@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    try:
        with DB("justbox.db") as db_instance:
            db_instance.add_user(telegram_id, username)
        await message.answer("""
    üòâ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥—Ä—É–ø–ø—ã Just Box!

    –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø–æ–º–æ–∂–µ—Ç –í–∞–º –≤—ã–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –õ–Æ–ë–´–• –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    1‚É£ POIZON (DEWU)
    2‚É£ taobao.com
    3‚É£ –∏ –¥—Ä—É–≥–∏–µ.

    ‚õîÔ∏è–í—Å–µ —Ä–∞—Å—á–µ—Ç—ã, –∑–∞–∫–∞–∑—ã –∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –¢–û–õ–¨–ö–û –í –ë–û–¢–ï. –ú—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!‚õîÔ∏è

    ‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç. –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.
                            """, reply_markup=start_keyboard)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data == 'place_order')
async def process_callback_order(call: CallbackQuery, state: FSMContext):
    await call.message.answer_photo(
        photo = FSInputFile("./images/1.png"),
        caption='''–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π —Ç–æ–≤–∞—Ä, –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ‚âà (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ), –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∫—É–ø–∏—Ç—å –¥–ª—è –í–∞—Å –Ω–µ —Å–º–æ–∂–µ—Ç.

–ü–æ—á–µ–º—É? –¢–æ–≤–∞—Ä—ã —Å ‚âà –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ –ö–∏—Ç–∞–π –∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã, –∞ –∏–∑-–∑–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ö–∏—Ç–∞–π—Å–∫–æ–π —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã–∫—É–ø –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.

–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –î–ê–õ–ï–ï, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.''',
        reply_markup=order_keyboard_1
    )
    

@router.message(F.text == '–î–∞–ª–µ–µ')
async def process_order1(message: Message, state: FSMContext):
    await message.answer_photo(
    photo = FSInputFile("./images/2.png"),
    caption='''–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –í–∞—à —Ç–æ–≤–∞—Ä –Ω–µ –∏–º–µ–µ—Ç ‚âà –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ, –ø–µ—Ä–µ–¥ —Ü–µ–Ω–æ–π. 

–¢–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –≤—ã–∫—É–ø–∏—Ç—å –Ω–µ —Å–º–æ–∂–µ–º.

–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –¥–∞–ª–µ–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.''', reply_markup=order_keyboard_2
)

@router.message(F.text == '–î–∞–ª—å—à–µ')
async def process_order2(message: Message, state: FSMContext):
    await message.answer_photo(
    photo = FSInputFile("./images/3.png"),
    caption='''–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –í–∞—à —Ç–æ–≤–∞—Ä –Ω–µ –∏–º–µ–µ—Ç ‚âà –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–¥ —Ü–µ–Ω–æ–π?

–¢–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –≤—ã–∫—É–ø–∏—Ç—å –Ω–µ —Å–º–æ–∂–µ–º.''', reply_markup=order_keyboard_3
)

@router.message(F.text == '–î–∞, —É–≤–µ—Ä–µ–Ω!')
async def process_order3(message: Message, state: FSMContext):
    await message.answer_photo(
    photo = FSInputFile("./images/4.png"),
    caption='''üìä –í –Ω–∞—à–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å üöö –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ –†–æ—Å—Å–∏–∏.

‚ÄºÔ∏è –¢–æ–≤–∞—Ä—ã —Å ‚âà –ù–ï –í–´–ö–£–ü–ê–ï–ú.

‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç. –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.''', reply_markup=order_kb_all
)

@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
async def process_order_cancel(message: Message, state: FSMContext):
    await message.answer("""
üòâ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥—Ä—É–ø–ø—ã Just Box!

–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø–æ–º–æ–∂–µ—Ç –í–∞–º –≤—ã–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –õ–Æ–ë–´–• –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:
1‚É£ POIZON (DEWU)
2‚É£ taobao.com
3‚É£ –∏ –¥—Ä—É–≥–∏–µ.

‚õîÔ∏è–í—Å–µ —Ä–∞—Å—á–µ—Ç—ã, –∑–∞–∫–∞–∑—ã –∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –¢–û–õ–¨–ö–û –í –ë–û–¢–ï. –ú—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!‚õîÔ∏è

‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç. –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.
                        """, reply_markup=start_keyboard)

@router.callback_query(F.data == 'category_shoes')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=shoes_kb)



@router.callback_query(F.data == 'calc_cost')
async def process_callback_calc(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–≤ –∫–≥) –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ –∫–º) –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.")
    await state.set_state(Calc.cost)
    await call.answer()

@router.message(Calc.cost)
async def process_cost(message: Message, state: FSMContext):
    try:
        weight, distance = map(float, message.text.split())
        costRUB = admin_settings.costRUB(weight, distance)
        costUSD = admin_settings.costUSD(weight, distance)
        await message.answer(f"""–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: 
{costRUB:.2f} RUB
{costUSD:.2f} USD""", reply_markup=menu_back)
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–≤–µ—Å –∫–≥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–º' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2 500').")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data == 'faq')
async def process_callback_faq(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üòâ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –∂–¥—É—Ç –í–∞—Å.", reply_markup=faq_keyboard)
    await call.answer()


@router.callback_query(F.data.in_(list(faq_answers.keys())))
async def process_faq_answer(call: CallbackQuery, state: FSMContext):
    answer = faq_answers[call.data]
    await call.message.edit_text(answer, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]))
    await call.answer()


@router.callback_query(F.data == 'ask_question')
async def process_callback_ask_question(call: CallbackQuery, state: FSMContext):
    await call.message.answer(ask_question, reply_markup=menu_back)
    
@router.callback_query(F.data == 'back_to_menu')
async def process_back_to_menu(call: CallbackQuery):
    await call.message.edit_text("""
üòâ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥—Ä—É–ø–ø—ã Just Box!

–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø–æ–º–æ–∂–µ—Ç –í–∞–º –≤—ã–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –õ–Æ–ë–´–• –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:
1‚É£ POIZON (DEWU)
2‚É£ taobao.com
3‚É£ –∏ –¥—Ä—É–≥–∏–µ.

‚õîÔ∏è–í—Å–µ —Ä–∞—Å—á–µ—Ç—ã, –∑–∞–∫–∞–∑—ã –∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –¢–û–õ–¨–ö–û –í –ë–û–¢–ï. –ú—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!‚õîÔ∏è

‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç. –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.
                        """, reply_markup=start_keyboard)


@router.callback_query(F.data == 'category_shoes')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=shoes_kb)
@router.callback_query(F.data == 'category_outerwear')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=outerwear_kb)
@router.callback_query(F.data == 'category_pants')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=pants_kb)
@router.callback_query(F.data == 'category_underwear')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=underwear_kb)
@router.callback_query(F.data == 'category_headwear')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=hats_kb)
@router.callback_query(F.data == 'category_socks')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=socks_kb)
@router.callback_query(F.data == 'category_bags')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=bags_kb)
@router.callback_query(F.data == 'category_accessories')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=accessory_kb)
@router.callback_query(F.data == 'category_cosmetics')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=cosmetics_kb)
@router.callback_query(F.data == 'category_electronics')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=electronics_kb)
@router.callback_query(F.data == 'category_sport')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=sport_kb)
@router.callback_query(F.data == 'category_figures')
async def process_callback_shoes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=figures_kb)

@router.callback_query(F.data.in_([
    'sneakers', 'boots', 'kedi', 'flip-flops', 'sandals', 'football_boots', 'shoes',
    'downjacket', 'vest', 'parka', 'lightjacket', 'windbreaker', 'blazer', 'hoodie', 'longslive', 'shirts', 'top',
    'jeans', 'pants', 'shorts',
    'underwearMen', 'underwearWomen', 'completeUnderwear',
    'hat', 'kepka', 'snud', 'warm_scarf', 'light_scarf',
    '1pair', '2pairs', '3pairs',
    'woman_small_bag', 'woman_big_bag', 'bag', 'suitcase', 'roadbag', 'bag_shoulder', 'bananka',
    'glasses', 'nails', 'jewelry', 'belts', 'gloves',
    'perfume', 'cream', 'lipstick', 'other',
    'laptop', 'phone', 'platforms', 'watches', 'tws_earbuds', 'wired_earbuds', 'keyboard', 'mouse', 'graphics_card', 'pc_case',
    'basketball_ball', 'football_ball', 'volleyball_ball', 'helmeet', 'other_sport',
    'bb100', 'bb400', 'bb1000',
    'category_back'
]))
async def process_product_item(call: CallbackQuery, state: FSMContext):
    callback_to_text = {
        'sneakers': '–ö—Ä–æ—Å—Å–æ–≤–∫–∏', 'boots': '–ë–æ—Ç–∏–Ω–∫–∏', 'kedi': '–ö–µ–¥—ã', 'flip-flops': '–®–ª–µ–ø–∞–Ω—Ü—ã', 'sandals': '–°–∞–Ω–¥–∞–ª–∏', 'football_boots': '–ë—É—Ç—Å—ã', 'shoes': '–¢—É—Ñ–ª–∏',
        'downjacket': '–ü—É—Ö–æ–≤–∏–∫', 'vest': '–ñ–∏–ª–µ—Ç–∫–∞', 'parka': '–ü–∞—Ä–∫–∞', 'lightjacket': '–õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞', 'windbreaker': '–í–µ—Ç—Ä–æ–≤–∫–∞', 'blazer': '–ü–∏–¥–∂–∞–∫', 'hoodie': '–•—É–¥–∏ / –¢–æ–ª—Å—Ç–æ–≤–∫–∞', 'longslive': '–õ–æ–Ω–≥—Å–ª–∏–≤', 'shirts': '–§—É—Ç–±–æ–ª–∫–∞ / –†—É–±–∞—à–∫–∞', 'top': '–¢–æ–ø',
        'jeans': '–î–∂–∏–Ω—Å—ã', 'pants': '–ë—Ä—é–∫–∏', 'shorts': '–®–æ—Ä—Ç—ã',
        'underwearMen': '–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ (–º—É–∂)', 'underwearWomen': '–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ (–∂–µ–Ω)', 'completeUnderwear': '–ö–æ–º–ø–ª–µ–∫—Ç –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è',
        'hat': '–®–∞–ø–∫–∞', 'kepka': '–ö–µ–ø–∫–∞', 'snud': '–°–Ω—É–¥', 'warm_scarf': '–¢–µ–ø–ª—ã–π —à–∞—Ä—Ñ', 'light_scarf': '–õ–µ–≥–∫–∏–π —à–∞—Ä—Ñ',
        '1pair': '1 –ø–∞—Ä–∞', '2pairs': '2 –ø–∞—Ä—ã', '3pairs': '3 –ø–∞—Ä—ã',
        'woman_small_bag': '–ñ–µ–Ω—Å–∫–∞—è —Å—É–º–∫–∞ –º–∞–ª–µ–Ω—å–∫–∞—è', 'woman_big_bag': '–ñ–µ–Ω—Å–∫–∞—è —Å—É–º–∫–∞ –±–æ–ª—å—à–∞—è', 'bag': '–†—é–∫–∑–∞–∫', 'suitcase': '–ß–µ–º–æ–¥–∞–Ω', 'roadbag': '–î–æ—Ä–æ–∂–Ω–∞—è —Å—É–º–∫–∞', 'bag_shoulder': '–°—É–º–∫–∞ —á–µ—Ä–µ–∑ –ø–ª–µ—á–æ', 'bananka': '–ë–∞–Ω–∞–Ω–∫–∞',
        'glasses': '–û—á–∫–∏', 'nails': '–ù–∞—à–∏', 'jewelry': '–£–∫—Ä–∞—à–µ–Ω–∏—è', 'belts': '–†–µ–º–Ω–∏', 'gloves': '–ü–µ—Ä—á–∞—Ç–∫–∏',
        'perfume': '–ü–∞—Ä—Ñ—é–º', 'cream': '–ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞/—Ä—É–∫', 'lipstick': '–ü–æ–º–∞–¥–∞', 'other': '–ü—Ä–æ—á–∏–µ',
        'laptop': '–ù–æ—É—Ç–±—É–∫', 'phone': '–¢–µ–ª–µ—Ñ–æ–Ω', 'platforms': '–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã', 'watches': '–ß–∞—Å—ã', 'tws_earbuds': '–ù–∞—É—à–Ω–∏–∫–∏ TWS', 'wired_earbuds': '–ü—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏', 'keyboard': '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞', 'mouse': '–ú—ã—à—å', 'graphics_card': '–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', 'pc_case': '–°–∏—Å—Ç–µ–º–Ω—ã–π –±–ª–æ–∫',
        'basketball_ball': '–ë–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π –º—è—á', 'football_ball': '–§—É—Ç–±–æ–ª—å–Ω—ã–π –º—è—á', 'volleyball_ball': '–í–æ–ª–µ–π–±–æ–ª—å–Ω—ã–π –º—è—á', 'helmeet': '–®–ª–µ–º', 'other_sport': '–î—Ä—É–≥–æ–µ',
        'bb100': 'Bearbrick 100%', 'bb400': 'Bearbrick 400%', 'bb1000': 'Bearbrick 1000%',
        'category_back': '–ù–∞–∑–∞–¥'
    }
    
    item_name = callback_to_text.get(call.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
    try:
        await call.message.answer_photo(
            photo=FSInputFile("./images/order_add.png"),
            caption=f'''
‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç. –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.

üñº–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ:
–£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {item_name}
–ü—Ä–∏–º–µ—Ä: –º–æ–¥–µ–ª—å, —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.'''
        )
        await state.set_state(Order.photo)
    except FileNotFoundError:
        await call.message.answer("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
    await call.answer()
async def download_photo(bot: Bot, file_id, order_id):
    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        downloaded_file = await bot.download_file(file_path)
        
        os.makedirs("order_photos", exist_ok=True)
        
        photo_path = f"order_photos/order_{order_id}.jpg"
        with open(photo_path, 'wb') as photo_file:
            photo_file.write(downloaded_file.read())
        return photo_path
    except Exception as e:
        print(f"Error downloading photo: {e}")
        return None

@router.message(Order.photo)
async def process_photo(message: Message, state: FSMContext):
    try:
        if not message.photo:
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.")
        

        photo_file_id = message.photo[-1].file_id
        
        data = await state.get_data()
        order_id = data.get('order_id', random.randint(100000, 999999))
        
        bot = Bot(token=config.BOT_TOKEN)
        photo_path = await download_photo(bot, photo_file_id, order_id)
        if not photo_path:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")


        await state.update_data(photo_path=photo_path)
        await state.set_state(Order.delivery)
        await message.answer("""üì¶ –£–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:
üöö –ê–≤—Ç–æ ~25 –¥–Ω–µ–π (—Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏)

‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç. –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.""",
    reply_markup=deliveries_kb)

    except ValueError as e:
        await message.answer(str(e))
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")


@router.message(Order.delivery)
@router.callback_query(F.data == "autodelivery")
async def process_delivery(call: CallbackQuery, state: FSMContext):
    await state.update_data(delivery=call.message.text)
    await state.set_state(Order.link)
    photo = FSInputFile("./images/12.png")
    await call.message.answer_photo(
        photo=photo,
        caption='''‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç. –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.

üîó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ https://dw4.co/t/A/18KfFHsf:'''
        )


@router.message(Order.link)
async def process_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    try:
        await state.set_state(Order.size)
    except FileNotFoundError:
        await message.answer("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
    photo = FSInputFile("./images/13.png")
    await message.answer_photo(
        photo=photo,
        caption='''‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç. –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.

üìè–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –æ–¥–µ–∂–¥—ã –∏ –æ–±—É–≤–∏). –ù–∞–ø—Ä–∏–º–µ—Ä 42''', reply_markup=skip_kb
        )

@router.message(Order.size)
@router.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def process_size(message: Message, state: FSMContext):
    size = message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
    await state.update_data(size=size)
    try:
        photo = FSInputFile("./images/14.png")
        await message.answer_photo(
            photo=photo,
            caption='''‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—â–∏ –í –Æ–ê–ù–Ø–•.

‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç. –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.

‚õîÔ∏è‚õîÔ∏è –ï—Å–ª–∏ –í—ã —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏ –∏–ª–∏ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É –∏–ª–∏ –∑–∞–∫–∞–∑–∞–ª–∏ –ø–æ ‚âà, —Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ë–ï–ó –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–ø–ª–∞—Ç—ã! ‚õîÔ∏è‚õîÔ∏è'''
        )
        await state.set_state(Order.cost_uan)
    except FileNotFoundError:
        await message.answer("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
    

@router.message(Order.cost_uan)
async def process_cost_uan(message: Message, state: FSMContext):
    await state.update_data(cost_uan=message.text)
    await state.set_state(Order.get_order)
    
    data = await state.get_data()
    required_fields = ['photo_path', 'delivery', 'link', 'cost_uan']
    if not all(field in data and data[field] for field in required_fields):
        await message.answer("‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        return
    
    cost_uan = data['cost_uan']
    price_rub = convert_uan_to_rub(cost_uan)
    price_usdt = convert_uan_to_usdt(cost_uan)
    
    try:
        photo = FSInputFile("./images/1.png")
        await message.answer_photo(
            photo=photo,
            caption=f'''–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {data['link']}
–†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –Æ–ê–ù–Ø–•: {cost_uan}
–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –†–£–ë–õ–Ø–•: {price_rub:.2f}
–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ USDT: {price_usdt:.2f}

‚ùï–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º. –ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è.

üöö –î–æ—Å—Ç–∞–≤–∫–∞ –°–î–≠–ö –ø–æ –†–æ—Å—Å–∏–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –û–¢–î–ï–õ–¨–ù–û! –û—Ç–ø—Ä–∞–≤–∫–∏ –∏–¥—É—Ç –∏–∑ –ú–æ—Å–∫–≤—ã.

‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç. –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.''',
            reply_markup=order_confirmation_kb
        )
    except FileNotFoundError:
        await message.answer("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")


@router.callback_query(F.data == 'confirm_order_final')
async def confirm_order(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = call.from_user.id
    username = call.from_user.username or call.from_user.first_name
    order_id = data.get('order_id', random.randint(100000, 999999))


    order_data = {
        'order_id': order_id,
        'photo_path': data.get('photo_path', ''),
        'delivery': data.get('delivery', '–ê–≤—Ç–æ'),
        'link': data.get('link', ''),
        'size': data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        'cost_uan': data.get('cost_uan', '0'),
        'price_rub': convert_uan_to_rub(data.get('cost_uan', '0')),
        'price_usdt': convert_uan_to_usdt(data.get('cost_uan', '0'))
    }

    try:
        
        with DB("justbox.db") as db_instance:
            db_instance.add_order(user_id, order_data)
            db_instance.execute("UPDATE users SET orders = orders + 1 WHERE telegram_id = ?", (user_id,))
            db_instance.commit()


        order_details = f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {call.from_user.full_name} (<a href='tg://user?id={user_id}'>{username}</a>)\n\n"
        order_details += f"üîó –°—Å—ã–ª–∫–∞: {order_data['link']}\n"
        order_details += f"üìè –†–∞–∑–º–µ—Ä: {order_data['size']}\n"
        order_details += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order_data['cost_uan']} –Æ–ê–ù / {order_data['price_rub']:.2f} RUB / {order_data['price_usdt']:.2f} USDT\n"
        try:
                photo = FSInputFile(order_data['photo_path'])
                await call.bot.send_photo(chat_id=1141474614, photo=photo, caption=order_details, parse_mode="HTML")
        except Exception as e:
                await call.bot.send_message(6567758362, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}\n{order_details}", parse_mode="HTML")
        await call.message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=start_keyboard)
        await state.clear()
    except sqlite3.Error as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
    await call.answer()




@router.callback_query(F.data == "edit_order")
async def edit_order(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(Order.photo) 
    await call.message.answer("üîÑ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")



def convert_uan_to_rub(uan: str) -> float:
    try:
        uan_float = float(uan.replace(',', '.'))
        return uan_float * uan_to_rub
    except ValueError:
        return 0.0

def convert_uan_to_usdt(uan: str) -> float:
    try:
        uan_float = float(uan.replace(',', '.'))
        return uan_float * uan_to_usd  # 1 CNY ‚âà 0.14 USDT
    except ValueError:
        return 0.0